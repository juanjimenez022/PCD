/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Practica7;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jujis
 */
public class Generador extends javax.swing.JFrame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {

        Generador GF = new Generador();
        GF.setSize(800, 500);
        GF.setBackground(Color.lightGray);
        GF.setLocation(100, 100);

        CanvasComedero Ccanvas = new CanvasComedero(800, 500);
        GF.add(Ccanvas);
        GF.setVisible(true);
        
        
        Comedero comedero = new Comedero(Ccanvas);
        Random rn = new Random(System.currentTimeMillis());
        int random = 0;
        int cantidad=20;//20
        //Runnable Animal;
        Thread Animales[] = new Thread[cantidad];
        for (int i = 0; i < cantidad; i++) {
            random = rn.nextInt(1, 3);

            try {
                Thread.sleep(random * 1000);//1000
            } catch (InterruptedException ex) {
                System.out.println("Problema en el Generador");
                Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if (random == 1) {
                Animales[i] = new Thread(new Gato(comedero));
            } else {
                Animales[i] = new Perro(comedero);
            }

            Animales[i].start();
            System.out.println("contador vale: "+i);
        }
        
        for (int i = 0; i < cantidad; i++) {
            Animales[i].join();
        }
        System.out.println("hemos terminado");
        Thread.sleep(2000);
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
